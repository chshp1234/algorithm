"""
给你一个正整数 n ，请你计算在 [1，n] 范围内能被 3、5、7 整除的所有整数之和。

返回一个整数，用于表示给定范围内所有满足约束条件的数字之和。



示例 1：

输入：n = 7
输出：21
解释：在 [1, 7] 范围内能被 3、5、7 整除的所有整数分别是 3、5、6、7 。数字之和为 21 。
示例 2：

输入：n = 10
输出：40
解释：在 [1, 10] 范围内能被 3、5、7 整除的所有整数分别是 3、5、6、7、9、10 。数字之和为 40 。
示例 3：

输入：n = 9
输出：30
解释：在 [1, 9] 范围内能被 3、5、7 整除的所有整数分别是 3、5、6、7、9 。数字之和为 30 。


提示：

1 <= n <= 103
"""


class Solution:

    # 枚举
    # 一趟遍历,判断每个数是否能被3,5,或7整除
    # 再把所有符合条件的数加起来
    def sumOfMultiples(self, n: int) -> int:
        return sum(i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0)

    # 容斥原理
    # 找到所有3,5,7的倍数相加起来
    # 这里会有重复相加的值,3*5,3*7,5*7,所以,减去这些值的倍数
    # 但3*5*7又多减了,所以重新加上这个值的倍数
    # 即可得到符合条件的所有值的和
