"""
在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。

每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。

注意，一开始你手头没有任何零钱。

给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。



示例 1：

输入：bills = [5,5,5,10,20]
输出：true
解释：
前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
由于所有客户都得到了正确的找零，所以我们输出 true。
示例 2：

输入：bills = [5,5,10,10,20]
输出：false
解释：
前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
由于不是每位顾客都得到了正确的找零，所以答案是 false。


提示：

1 <= bills.length <= 105
bills[i] 不是 5 就是 10 或是 20
"""
from typing import List


class Solution:
    """
    贪心
    记录5元和10元钞票的数量
    用户给5元时,5元钞票数量+1
    用户给10元时,判断是否有剩余的5元钞票,并且10元钞票数量+1
    用户给20元时,优先判断是否有剩余的10元钞票以及5元各一张,如果不够,再判断5元数量是否大于等于3
    """

    def lemonadeChange(self, bills: List[int]) -> bool:
        left5 = 0
        left10 = 0
        for b in bills:
            if b == 5:
                left5 += 1
            elif b == 10 and left5 > 0:
                left10 += 1
                left5 -= 1
            elif b == 20 and left10 > 0 and left5 > 0:
                left5 -= 1
                left10 -= 1
            elif b == 20 and left5 >= 3:
                left5 -= 3
            else:
                return False
        return True


print(Solution().lemonadeChange([5, 5, 10, 10, 20]))
