package com.study.algorithm.algorithms;

//峰值元素是指其值严格大于左右相邻值的元素。
//
//给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。
//
//你可以假设 nums[-1] = nums[n] = -∞ 。
//
//你必须实现时间复杂度为 O(log n) 的算法来解决此问题。
//
// 
//
//示例 1：
//
//输入：nums = [1,2,3,1]
//输出：2
//解释：3 是峰值元素，你的函数应该返回其索引 2。
//示例 2：
//
//输入：nums = [1,2,1,3,5,6,4]
//输出：1 或 5
//解释：你的函数可以返回索引 1，其峰值元素为 2；
//     或者返回索引 5， 其峰值元素为 6。
// 
//
//提示：
//
//1 <= nums.length <= 1000
//-231 <= nums[i] <= 231 - 1
//对于所有有效的 i 都有 nums[i] != nums[i + 1]
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/find-peak-element
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
public class 寻找峰值 {
    public int findPeakElement(int[] nums) {
        //二分查找
        //1.只有当当前元素大于左边元素并且大于右边元素时，这个元素才是峰值
        //2.二分查找时，若当前值大于右边值（或小于左边值），说明此元素处于下坡中，那么领右边界r=当前值mid-1
        //3.若当前值小于右边值（或大于左边值），说明此元素处于上坡中，则领左边界l=当前值mid+1
        //否则（第一种情况），当前肯定处于山峰
        int l = 0, r = nums.length - 1;
        while (l < r) {
            int mid = l + ((r - l) >> 1);

            if (nums[mid] > nums[mid + 1] && (mid == 0 || nums[mid] > nums[mid - 1])) {
                //很明显，这个点是山峰
                return mid;
            } else if (nums[mid] > nums[mid + 1]) {
                //这个点处于下坡中，抛弃右半部分
                r = mid - 1;
            } else {
                //这个点处于上坡中，抛弃左半部分
                l = mid + 1;
            }
        }

        //因为num[i]!=num[i-1]，所以此数组肯定有山峰，所以肯定走不到这一步
        return l;
    }
}
