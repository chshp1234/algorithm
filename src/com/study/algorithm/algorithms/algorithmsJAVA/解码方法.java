package com.study.algorithm.algorithms.algorithmsJAVA;

//一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
//
//'A' -> 1
//'B' -> 2
//...
//'Z' -> 26
//要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
//
//"AAJF" ，将消息分组为 (1 1 10 6)
//"KJF" ，将消息分组为 (11 10 6)
//注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
//
//给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
//
//题目数据保证答案肯定是一个 32 位 的整数。
//
// 
//
//示例 1：
//
//输入：s = "12"
//输出：2
//解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
//示例 2：
//
//输入：s = "226"
//输出：3
//解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
//示例 3：
//
//输入：s = "0"
//输出：0
//解释：没有字符映射到以 0 开头的数字。
//含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
//由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
//示例 4：
//
//输入：s = "06"
//输出：0
//解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。
// 
//
//提示：
//
//1 <= s.length <= 100
//s 只包含数字，并且可能包含前导零。
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/decode-ways
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
public class 解码方法 {
    public int numDecodings(String s) {
        //动态规划
        //使用两个变量t、f：遍历的过程中t表示选中当前字符为结尾时可获得的解码总数；f表示不选中当前字符为结尾时可获得的解码总数。
        char[] chars = s.toCharArray();
        if (chars[0] == '0') {
            return 0;
        }
        int len = chars.length;
        if (len == 1) {
            return 1;
        }
        int  t    = 1;
        int  f    = chars[0] > '2' ? 0 : 1;
        char last = chars[0];
        for (int i = 1; i < len; i++) {

            char current = chars[i];
            //当前字符为‘0’
            if (current == '0') {
                if (last == '0' || last > '2') {
                    //若上一个字符为‘0’或者大于‘2’时，因为‘0’不是个有效字母，所以返回结果0.
                    return 0;
                }
                //必须选中字符‘0’为结尾，才能是一个有效字母，那么上一个字符必须不是结尾字符，所以t=f，f=0.
                t = f;
                f = 0;
            } else if (current < '3') {
                //若当前字符小于‘3’，那么上一个字符不管是什么，当前字符既可以是结尾字符，也可以不是结尾字符
                int temp = t;
                //那么以当前字符为结尾的数量，就为t+f，表示上一个字符不管选中与否，都可以是个有效字母
                t = t + f;
                //若不选中当前字母，那么f=t（计算之前的t）
                f = temp;
            } else if (current < '7') {
                if (last == '1' || last == '2') {
                    //表示13-16或者23-26，表示可以选中或不选中上一个字符时，选中当前字符后都可以是个有效字母
                    t = t + f;
                }
                //若当前字母大于‘3’，那么当前字母必须选择，所以f=0
                f = 0;
            } else {
                if (last == '1') {
                    //表示17-19，表示可以选中或不选中上一个字符时，选中当前字符后都可以是个有效字母
                    t = t + f;
                }
                //若当前字母大于‘3’，那么当前字母必须选择，所以f=0
                f = 0;
            }
            last = chars[i];
        }
        return t;
    }
}
