package com.study.algorithm.algorithms.algorithmsJAVA;

import org.junit.Test;

//颠倒给定的 32 位无符号整数的二进制位。
//
// 
//
//提示：
//
//请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
//在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
// 
//
//进阶:
//如果多次调用这个函数，你将如何优化你的算法？
//
// 
//
//示例 1：
//
//输入: 00000010100101000001111010011100
//输出: 00111001011110000010100101000000
//解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
//示例 2：
//
//输入：11111111111111111111111111111101
//输出：10111111111111111111111111111111
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
//示例 1：
//
//输入：n = 00000010100101000001111010011100
//输出：964176192 (00111001011110000010100101000000)
//解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
//示例 2：
//
//输入：n = 11111111111111111111111111111101
//输出：3221225471 (10111111111111111111111111111111)
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
// 
//
//提示：
//
//输入是一个长度为 32 的二进制字符串
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/reverse-bits
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
public class 颠倒二进制位 {
    @Test
    public void 颠倒二进制位() {

        System.out.println("颠倒二进制位:" + reverseBits(-2));
    }

    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        //将 n 视作一个长为 32 的二进制串，从低位往高位枚举 n 的每一位，将其倒序添加到翻转结果 result 中。
        //n的低位（1~16）中将左移至高位，n的高位（16~32）将右移至低位
        int result       = 0;
        int reverseIndex = 31;

        //低位左移
        for (int i = 0; i < 16; i++, reverseIndex -= 2) {
            result |= ((1 << i) & n) << reverseIndex;
        }
        reverseIndex += 2;
        //高位右移
        for (int i = 16; i < 32; i++, reverseIndex += 2) {
            result |= ((1 << i) & n) >>> reverseIndex;
        }
        return result;
    }

    //方法二：位运算分治
    //思路
    //
    //若要翻转一个二进制串，可以将其均分成左右两部分，对每部分递归执行翻转操作，然后将左半部分拼在右半部分的后面，即完成了翻转。
    //由于左右两部分的计算方式是相似的，利用位掩码和位移运算，我们可以自底向上地完成这一分治流程。
    //
    //
    //
    //对于递归的最底层，我们需要交换所有奇偶位：
    //
    //取出所有奇数位和偶数位；
    //将奇数位移到偶数位上，偶数位移到奇数位上。
    //类似地，对于倒数第二层，每两位分一组，按组号取出所有奇数组和偶数组，然后将奇数组移到偶数组上，偶数组移到奇数组上。以此类推。
    //
    //需要注意的是，在某些语言（如 Java）中，没有无符号整数类型，因此对 n 的右移操作应使用逻辑右移。
    //
    //代码
    //
    //public class Solution {
    //    private static final int M1 = 0x55555555; // 01010101010101010101010101010101
    //    private static final int M2 = 0x33333333; // 00110011001100110011001100110011
    //    private static final int M4 = 0x0f0f0f0f; // 00001111000011110000111100001111
    //    private static final int M8 = 0x00ff00ff; // 00000000111111110000000011111111
    //
    //    public int reverseBits(int n) {
    //        n = n >>> 1 & M1 | (n & M1) << 1;
    //        n = n >>> 2 & M2 | (n & M2) << 2;
    //        n = n >>> 4 & M4 | (n & M4) << 4;
    //        n = n >>> 8 & M8 | (n & M8) << 8;
    //        return n >>> 16 | n << 16;
    //    }
    //}
    //
    //作者：LeetCode-Solution
    //链接：https://leetcode-cn.com/problems/reverse-bits/solution/dian-dao-er-jin-zhi-wei-by-leetcode-solu-yhxz/
    //来源：力扣（LeetCode）
    //著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
}
