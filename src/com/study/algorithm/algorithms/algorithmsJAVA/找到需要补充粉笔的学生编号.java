package com.study.algorithm.algorithms.algorithmsJAVA;

//一个班级里有 n 个学生，编号为 0 到 n - 1 。每个学生会依次回答问题，编号为 0 的学生先回答，然后是编号为 1 的学生，以此类推，直到编号为 n - 1 的学生，然后老师会重复这个过程，重新从编号为 0 的学生开始回答问题。
//
//给你一个长度为 n 且下标从 0 开始的整数数组 chalk 和一个整数 k 。一开始粉笔盒里总共有 k 支粉笔。当编号为 i 的学生回答问题时，他会消耗 chalk[i] 支粉笔。如果剩余粉笔数量 严格小于 chalk[i] ，那么学生 i 需要 补充 粉笔。
//
//请你返回需要 补充 粉笔的学生 编号 。
//
// 
//
//示例 1：
//
//输入：chalk = [5,1,5], k = 22
//输出：0
//解释：学生消耗粉笔情况如下：
//- 编号为 0 的学生使用 5 支粉笔，然后 k = 17 。
//- 编号为 1 的学生使用 1 支粉笔，然后 k = 16 。
//- 编号为 2 的学生使用 5 支粉笔，然后 k = 11 。
//- 编号为 0 的学生使用 5 支粉笔，然后 k = 6 。
//- 编号为 1 的学生使用 1 支粉笔，然后 k = 5 。
//- 编号为 2 的学生使用 5 支粉笔，然后 k = 0 。
//编号为 0 的学生没有足够的粉笔，所以他需要补充粉笔。
//示例 2：
//
//输入：chalk = [3,4,1,2], k = 25
//输出：1
//解释：学生消耗粉笔情况如下：
//- 编号为 0 的学生使用 3 支粉笔，然后 k = 22 。
//- 编号为 1 的学生使用 4 支粉笔，然后 k = 18 。
//- 编号为 2 的学生使用 1 支粉笔，然后 k = 17 。
//- 编号为 3 的学生使用 2 支粉笔，然后 k = 15 。
//- 编号为 0 的学生使用 3 支粉笔，然后 k = 12 。
//- 编号为 1 的学生使用 4 支粉笔，然后 k = 8 。
//- 编号为 2 的学生使用 1 支粉笔，然后 k = 7 。
//- 编号为 3 的学生使用 2 支粉笔，然后 k = 5 。
//- 编号为 0 的学生使用 3 支粉笔，然后 k = 2 。
//编号为 1 的学生没有足够的粉笔，所以他需要补充粉笔。
// 
//
//提示：
//
//chalk.length == n
//1 <= n <= 105
//1 <= chalk[i] <= 105
//1 <= k <= 109
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
public class 找到需要补充粉笔的学生编号 {
    public int chalkReplacer(int[] chalk, int k) {
        //前缀和+二分查找
        //用前缀和记录到每个下标为止的同学使用的粉笔数量
        //将总粉笔数量对所有同学需要使用的粉笔数量进行取模，所得的余数将在下一轮中得到某位同学的下标
        //因为前面已经求得数组前缀和，我们只要找到第一个前缀和大于余数的那位同学的下标即可，
        //又由于前缀和肯定是单调递增的，那么在这个数组中查找某个数，就可以使用二分查找的办法

        int len = chalk.length;
        int[] preSum = new int[len + 1];

        //求前缀和
        for (int i = 0; i < len; i++) {
            if ((preSum[i + 1] = preSum[i] + chalk[i]) > k) {
                return i;
            }
        }
        int left = k % preSum[len];
        int l = 1, r = len;

        //二分查找
        while (l <= r) {

            //mid相对原数组下标为mid-1
            int mid = l + (r - l) / 2;

            //若相等，说明下一位同学粉笔将（肯定）不够用
            if (preSum[mid] == left) {
                return mid;
            }

            //如果大于，r--；小于，l++
            if (preSum[mid] > left) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        //最后因返回对应的原下标l-1
        return l - 1;
    }
}
