package com.study.algorithm.algorithms.algorithmsJAVA;

//有效括号字符串为空 ""、"(" + A + ")" 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。
//
//例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
//如果有效字符串 s 非空，且不存在将其拆分为 s = A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
//
//给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
//
//对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。
//
// 
//
//示例 1：
//
//输入：s = "(()())(())"
//输出："()()()"
//解释：
//输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
//删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
//示例 2：
//
//输入：s = "(()())(())(()(()))"
//输出："()()()()(())"
//解释：
//输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
//删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
//示例 3：
//
//输入：s = "()()"
//输出：""
//解释：
//输入字符串为 "()()"，原语化分解得到 "()" + "()"，
//删除每个部分中的最外层括号后得到 "" + "" = ""。
// 
//
//提示：
//
//1 <= s.length <= 105
//s[i] 为 '(' 或 ')'
//s 是一个有效括号字符串
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/remove-outermost-parentheses
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
public class 删除最外层的括号 {
    public String removeOuterParentheses(String s) {
        //模拟栈（计数）
        //计算有效括号可以用栈，遇到'('入栈,遇到')'出栈，此时就可形成一对有效的括号
        //此题可以用一个计数器left来计数左括号入栈的数量，
        //只有当(char=='('&&left!=0)||(char==')'&&left!=1)时，将当前字符加入字符串结果中（left=0或left=1，说明是括号最外层）
        //相应将left++或left--，统计遇到的括号对数
        int len = s.length();

        int left = 0;
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < len; i++) {
            if (s.charAt(i) == '(') {
                if (left != 0) {
                    result.append('(');
                }
                left++;
            } else {
                if (left != 1) {
                    result.append(')');
                }
                left--;
            }
        }

        return result.toString();
    }
}
