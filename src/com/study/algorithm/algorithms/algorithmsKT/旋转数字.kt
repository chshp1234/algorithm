package com.study.algorithm.algorithms.algorithmsKT

//我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。
//
//如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。
//
//现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？
//
// 
//
//示例：
//
//输入: 10
//输出: 4
//解释:
//在[1, 10]中有四个好数： 2, 5, 6, 9。
//注意 1 和 10 不是好数, 因为他们在旋转之后不变。
// 
//
//提示：
//
//N 的取值范围是 [1, 10000]。
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/rotated-digits
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class 旋转数字 {
    fun rotatedDigits(n: Int): Int {
        //动态规划
        //判断一个数n是否是好数，那么我们可以首先判断n/10是否是好数：
        //1. 如果n/10是好数，那么只要n%10（也就是个位数）不是3、4、7，即可确认n是好数
        //2. 如果n/10不是好数，但n/10是个自旋转数（也就是所有数字都是0、1、8），那么只要n%10是2、5、6、9，这个数n也是一个好数
        //设状态dp[i]=0、1、2：
        //dp[i]=0，说明数字i不是有效的好数，那么在数字i前后添加任何数后的新数字也不可能是个好数；
        //dp[i]=1，说明数字i是个自旋转数，那么在数字i前后只能添加2、5、6、9后，新数字才会是个好数；
        //dp[i]=2，说明数字i是个好数，那么在数字i前后添加的数只要不是3、4、7，新数字会是个好数；

        //举个🌰
        //45，其中4不是个好数也不是自旋转数，那么后面加个5（前后再加任何数），45也不会是个好数或自旋转数
        //56，5是个好数，那么在后面加个6（只要不是3、4、7），56也是个好数
        //18，1虽然不是个好数，但是个自旋转数，那么在其后面加了个8（0、1、8，自旋转数），18是个自旋转数
        //16，1虽然不是个好数，但是个自旋转数，那么在其后面加了个8（2、5、6、9，好数），16是个好数
        //
        //作者：chshp
        //链接：https://leetcode.cn/problems/rotated-digits/solution/by-chshp-opdh/
        //来源：力扣（LeetCode）
        //著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

        //状态dp
        val dp = IntArray(n + 1)
        //数字0是个自旋转数
        dp[0] = 1

        //判断数字i是否可以有效转换成另一个数字（也就是个位数是否是好数）
        val isOther = BooleanArray(10)
        isOther[2] = true
        isOther[5] = true
        isOther[6] = true
        isOther[9] = true

        //判断数字i是否是自旋转数
        val isSelf = BooleanArray(10)
        isSelf[0] = true
        isSelf[1] = true
        isSelf[8] = true

        //到n时的所有好数数目
        var size = 0

        for (i in 1..n) {
            var num = i / 10

            //如果i/10是个好数
            if (dp[num] == 2) {
                num = i % 10
                if (isOther[num] || isSelf[num]) {
                    //n%10是个好数或者自旋转数
                    dp[i] = 2
                    size++
                }
            }
            //如果i/10是个自旋转数
            else if (dp[num] == 1) {
                num = i % 10
                if (isOther[num]) {
                    //n%10是个好数
                    dp[i] = 2
                    size++
                } else if (isSelf[num]) {
                    //n%10自旋转数
                    dp[i] = 1
                }
            }
        }

        return size

    }
}