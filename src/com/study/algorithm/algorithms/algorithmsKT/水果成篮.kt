package com.study.algorithm.algorithms.algorithmsKT

//你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。
//
//你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：
//
//你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。
//你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。
//一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。
//给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。
//
// 
//
//示例 1：
//
//输入：fruits = [1,2,1]
//输出：3
//解释：可以采摘全部 3 棵树。
//示例 2：
//
//输入：fruits = [0,1,2,2]
//输出：3
//解释：可以采摘 [1,2,2] 这三棵树。
//如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。
//示例 3：
//
//输入：fruits = [1,2,3,2,2]
//输出：4
//解释：可以采摘 [2,3,2,2] 这四棵树。
//如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。
//示例 4：
//
//输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]
//输出：5
//解释：可以采摘 [1,2,1,1,2] 这五棵树。
// 
//
//提示：
//
//1 <= fruits.length <= 105
//0 <= fruits[i] < fruits.length
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/fruit-into-baskets
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class 水果成篮 {
    //思路(也是去年某一题滑动窗口的思路)
    //设窗口left...right,为可以获得的最大水果数目.
    //窗口内水果的当前状态不一定符合条件,但窗口在整体上是处于最优解的;
    //如果窗口内水果符合条件,则右指针+1,左指针不动,如果不符合条件,左右指针一起移动,即可满足窗口一直处于最优解的状态下.
    //过程
    //首先定义一个哈希表,记录每种水果以及对应的水果数目.
    //
    //右指针每次遍历时,将当前水果加入哈希表中
    //判断哈希表中总共水果种类(map.size)是否大于2,如果大于2将左指针指向的水果数量-1,并且如果数量为0的话,就将水果从哈希表中移除
    //返回左右指针间隔(即为最大可获得的水果数目)
    //优势: 不用实时计算最大数目,最后直接返回窗口大小即可.
    //
    //作者：chshp
    //链接：https://leetcode.cn/problems/fruit-into-baskets/solution/by-chshp-t8yu/
    //来源：力扣（LeetCode）
    //著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
    fun totalFruit(fruits: IntArray): Int {
        var left = 0
        val map = mutableMapOf<Int, Int>()
        for (i in fruits.indices) {
            map[fruits[i]] = map.getOrDefault(fruits[i], 0) + 1
            if (map.size > 2) {
                //如果哈希表大小大于2,左指针跟着一起移动
                val count = map[fruits[left]]!!
                //如果左指针移动后,对应种类水果数量减为0了,则移除这个种类的水果
                if (count == 1) {
                    map.remove(fruits[left])
                } else {
                    map[fruits[left]] = count - 1
                }
                left++
            }
        }
        //返回窗口大小
        return fruits.size - left
    }
}