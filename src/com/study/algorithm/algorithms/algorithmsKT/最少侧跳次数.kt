package com.study.algorithm.algorithms.algorithmsKT

//给你一个长度为 n 的 3 跑道道路 ，它总共包含 n + 1 个 点 ，编号为 0 到 n 。一只青蛙从 0 号点第二条跑道 出发 ，它想要跳到点 n 处。然而道路上可能有一些障碍。
//
//给你一个长度为 n + 1 的数组 obstacles ，其中 obstacles[i] （取值范围从 0 到 3）表示在点 i 处的 obstacles[i] 跑道上有一个障碍。如果 obstacles[i] == 0 ，那么点 i 处没有障碍。任何一个点的三条跑道中 最多有一个 障碍。
//
//比方说，如果 obstacles[2] == 1 ，那么说明在点 2 处跑道 1 有障碍。
//这只青蛙从点 i 跳到点 i + 1 且跑道不变的前提是点 i + 1 的同一跑道上没有障碍。为了躲避障碍，这只青蛙也可以在 同一个 点处 侧跳 到 另外一条 跑道（这两条跑道可以不相邻），但前提是跳过去的跑道该点处没有障碍。
//
//比方说，这只青蛙可以从点 3 处的跑道 3 跳到点 3 处的跑道 1 。
//这只青蛙从点 0 处跑道 2 出发，并想到达点 n 处的 任一跑道 ，请你返回 最少侧跳次数 。
//
//注意：点 0 处和点 n 处的任一跑道都不会有障碍。
//
// 
//
//示例 1：
//
//
//输入：obstacles = [0,1,2,3,0]
//输出：2
//解释：最优方案如上图箭头所示。总共有 2 次侧跳（红色箭头）。
//注意，这只青蛙只有当侧跳时才可以跳过障碍（如上图点 2 处所示）。
//示例 2：
//
//
//输入：obstacles = [0,1,1,3,3,0]
//输出：0
//解释：跑道 2 没有任何障碍，所以不需要任何侧跳。
//示例 3：
//
//
//输入：obstacles = [0,2,1,0,3,0]
//输出：2
//解释：最优方案如上图所示。总共有 2 次侧跳。
// 
//
//提示：
//
//obstacles.length == n + 1
//1 <= n <= 5 * 105
//0 <= obstacles[i] <= 3
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/minimum-sideway-jumps
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class 最少侧跳次数 {
    fun minSideJumps(obstacles: IntArray): Int {
        //贪心
        //我们可以算出到达每个点的每条跑道的最少侧跳次数
        //用f，s，t记录到当前点位的3条跑道的最少侧跳次数
        //对于一个跑道，可以由其他跑道侧跳，或者从上一个点位的当前跑道往前
        //如果上一个点位的障碍在当前跑道，则只能从旁边的跑道侧跳过来
        //如果上一个点位不在当前跑道，则可以直接从上一个点位往前
        //如果当前跑道有障碍，则无法到达当前跑道，令侧跳次数为Int最大值
        var f = 1
        var s = 0
        var t = 1

        for (i in 1 until obstacles.size) {

            //上一个跑道的障碍
            //如果上一个点位没有障碍，则都可以直接往前
            when (obstacles[i - 1]) {
                //如果上一个点位的障碍在跑道1
                1 -> when (obstacles[i]) {
                    //因为上一个点位的障碍在1，所以2号跑道和3号跑道可以直接往前

                    //当前点位没有障碍，则可以从2号和3号跑道侧跳到1
                    0 -> f = Math.min(s, t) + 1
                    //当前点位的障碍在2号跑道，那么只能从3号跑道侧跳到1号跑道，同时令到达2号跑道的侧跳次数为Int最大值
                    2 -> {
                        f = t + 1
                        s = Int.MAX_VALUE
                    }
                    //当前点位的障碍在3号跑道，那么只能从2号跑道侧跳到1号跑道，同时令到达3号跑道的侧跳次数为Int最大值
                    3 -> {
                        f = s + 1
                        t = Int.MAX_VALUE
                    }
                }
                //如果上一个点位的障碍在跑道1
                //判断逻辑同上
                2 -> when (obstacles[i]) {
                    0 -> s = Math.min(f, t) + 1
                    1 -> {
                        s = t + 1
                        f = Int.MAX_VALUE
                    }

                    3 -> {
                        s = f + 1
                        t = Int.MAX_VALUE
                    }
                }
                //如果上一个点位的障碍在跑道1
                //判断逻辑同上
                3 -> when (obstacles[i]) {
                    0 -> t = Math.min(f, s) + 1
                    1 -> {
                        t = s + 1
                        f = Int.MAX_VALUE
                    }

                    2 -> {
                        t = f + 1
                        s = Int.MAX_VALUE
                    }
                }
            }
        }
        //返回最后到达3条跑道的侧跳数的最小值
        return Math.min(f, Math.min(s, t))
    }
}