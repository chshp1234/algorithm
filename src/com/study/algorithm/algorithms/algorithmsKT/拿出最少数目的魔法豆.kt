package com.study.algorithm.algorithms.algorithmsKT

//给定一个 正整数 数组 beans ，其中每个整数表示一个袋子里装的魔法豆的数目。
//
//请你从每个袋子中 拿出 一些豆子（也可以 不拿出），使得剩下的 非空 袋子中（即 至少还有一颗 魔法豆的袋子）魔法豆的数目 相等。一旦把魔法豆从袋子中取出，你不能再将它放到任何袋子中。
//
//请返回你需要拿出魔法豆的 最少数目。
//
//
//
//示例 1：
//
//输入：beans = [4,1,6,5]
//输出：4
//解释：
//- 我们从有 1 个魔法豆的袋子中拿出 1 颗魔法豆。
//  剩下袋子中魔法豆的数目为：[4,0,6,5]
//- 然后我们从有 6 个魔法豆的袋子中拿出 2 个魔法豆。
//  剩下袋子中魔法豆的数目为：[4,0,4,5]
//- 然后我们从有 5 个魔法豆的袋子中拿出 1 个魔法豆。
//  剩下袋子中魔法豆的数目为：[4,0,4,4]
//总共拿出了 1 + 2 + 1 = 4 个魔法豆，剩下非空袋子中魔法豆的数目相等。
//没有比取出 4 个魔法豆更少的方案。
//示例 2：
//
//输入：beans = [2,10,3,2]
//输出：7
//解释：
//- 我们从有 2 个魔法豆的其中一个袋子中拿出 2 个魔法豆。
//  剩下袋子中魔法豆的数目为：[0,10,3,2]
//- 然后我们从另一个有 2 个魔法豆的袋子中拿出 2 个魔法豆。
//  剩下袋子中魔法豆的数目为：[0,10,3,0]
//- 然后我们从有 3 个魔法豆的袋子中拿出 3 个魔法豆。
//  剩下袋子中魔法豆的数目为：[0,10,0,0]
//总共拿出了 2 + 2 + 3 = 7 个魔法豆，剩下非空袋子中魔法豆的数目相等。
//没有比取出 7 个魔法豆更少的方案。
//
//
//提示：
//
//1 <= beans.length <= 105
//1 <= beans[i] <= 105
class 拿出最少数目的魔法豆 {

    //排序+前缀和
    //先对数组进行排序
    //然后对于每一个元素beans[i]，如果我们要把所有元素都与beans[i]齐平，那么小于beans[i]的元素，就该全部取走，大于beans[i]的元素，都将减去其差值
    //用一个数pre记录前缀和sum(0...i-1)，那么所有大于beans[i]的元素与beans[i]的差值的和+pre就为需要拿走的魔法豆的数量总和。
    //那么当遍历到beans[i]时，所有取走的魔法豆的数量和=sum - (beans.size - i) * beans[i]
    //在遍历的过程中，维护一个最小值，即可得到一个最少的数目
    fun minimumRemoval(beans: IntArray): Long {
        beans.sort()
        var sum = 0L
        for (i in beans) {
            sum += i
        }
        var pre = 0L
        var res = Long.MAX_VALUE

        for (i in beans.indices) {
            res = Math.min(sum - (beans.size - i) * beans[i].toLong(), res)
            pre += beans[i]
        }

        return res
    }
}