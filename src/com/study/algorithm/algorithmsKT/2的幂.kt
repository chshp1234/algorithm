package com.study.algorithm.algorithmsKT

//给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。
//
//如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。
//
// 
//
//示例 1：
//
//输入：n = 1
//输出：true
//解释：20 = 1
//示例 2：
//
//输入：n = 16
//输出：true
//解释：24 = 16
//示例 3：
//
//输入：n = 3
//输出：false
//示例 4：
//
//输入：n = 4
//输出：true
//示例 5：
//
//输入：n = 5
//输出：false
// 
//
//提示：
//
//-231 <= n <= 231 - 1
// 
//
//进阶：你能够不使用循环/递归解决此问题吗？
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/power-of-two
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class `2的幂` {
    fun isPowerOfTwo(n: Int): Boolean {

        //既然是2的幂，那么首先此数肯定是正数，其次，二进制表示中，次数只有一个“1”位

        //方法一：移除此数最低的“1”位，若剩余数为0，则表示次数是2的幂。
        //1.n & (n - 1)，移除整数n最低位“1”
        //2.n & (-n)，取出整数n最低位“1”
        return n != 0 && ((n - 1) and n) == 0

        //判断是否为最大 22 的幂的约数
        //思路与算法
        //
        //除了使用二进制表示判断之外，还有一种较为取巧的做法。
        //
        //在题目给定的 32 位有符号整数的范围内，最大的 2 的幂为 2^30 = 1073741824。我们只需要判断 n 是否是 2^30的约数即可。
        //
        //作者：LeetCode-Solution
        //链接：https://leetcode-cn.com/problems/power-of-two/solution/2de-mi-by-leetcode-solution-rny3/
        //来源：力扣（LeetCode）
        //著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
    }
}